"sinesurface = function(seed,gridd,maxamp,nfacets) {\n  // A seeded RNG (same results for = values of gridd)\n  Math.seedrandom(''+seed+'')\n  var waves = [];\n  for (var ii = 0;  ii < 10; ii++) {\n    var amp = maxamp*Math.random();\n    var wvl = Math.max(.1,Math.random())*gridd;\n    var phi = Math.PI*Math.random();\n    var psi = Math.PI*Math.random();\n    waves.push({'amplitude':amp,'wavelength':wvl,'azimuth':phi,'phase':psi})\n  }\n  //waves = [[0.0,10.0,Math.PI/2.0,0.1]]\n  \n  var vertices = [];\n  var facets = [];\n  \n  var height = function(x, y) {\n    var ztarget = 0;\n    for (ii = 0; ii < waves.length; ii++) {\n      // Length along wave ii (normalized to wavelength)\n      // Each wave has [amplitude, wavelength, direction, phase]\n      var amp = waves[ii].amplitude;\n      var wvl = waves[ii].wavelength;\n      var phi = waves[ii].azimuth;\n      var psi = waves[ii].phase\n      var cq = Math.cos(phi);\n      var sq = Math.sin(phi);\n      var L = (x*cq + y*sq)/wvl;\n      var q = L*2*Math.PI+psi;\n      ztarget = ztarget + amp*Math.cos(q);\n    }\n    return ztarget;\n  };\n  \n  var twopi = 2*Math.PI;\n  var surface_derivatives = function(x, y, yaw) {\n    var z = 0, dzdx = 0, dzdy = 0;\n    for (ii = 0; ii < waves.length; ii++) {\n      // Length along wave ii (normalized to wavelength)\n      // Each wave has [amplitude, wavelength, direction, phase]\n      var amp = waves[ii].amplitude;\n      var wvl = waves[ii].wavelength;\n      var phi = waves[ii].azimuth;\n      var psi = waves[ii].phase;\n      var cq = Math.cos(phi);\n      var sq = Math.sin(phi);\n      var L = (x*cq + y*sq)/wvl;  var dLdx = cq/wvl;      var dLdy = sq/wvl;\n      var q = L*twopi+psi;        var dqdx = dLdx*twopi;  var dqdy = dLdy*twopi;\n      var cq_ = Math.cos(q);\n      var sq_ = Math.sin(q);\n      z = z + amp*cq_;            dzdx -= amp*dqdx*sq_;   dzdy -= amp*dqdy*sq_;\n    }\n    return {z:z,dzdx:dzdx,dzdy:dzdy};\n  };\n  \n  var d = gridd;\n  var n = Math.max(2,Math.min(200,nfacets));\n  var xmax = d, xmin = -d, ymax = d, ymin = -d;\n  var cols = n;\n  var rows = n;\n  var yspc = (ymax-ymin)/rows;\n  var xspc = (xmax-xmin)/cols;\n  for (var r = 0; r <= rows; r++) {\n    for (var c = 0; c <= cols; c++) {\n      var x = xmin + c*xspc;\n      var y = ymin + r*yspc;\n      var z = height(x,y);\n      vertices.push( [x, y, z] );\n      if (c<cols && r<rows) {\n        var f0 = (r)    *(cols+1) + (c) + 1;\n        var f1 = (r + 1)*(cols+1) + (c) + 1;\n        var f2 = (r + 1)*(cols+1) + (c);\n        facets.push([f0, f1, f2]);\n        f0 = (r + 1)*(cols+1) + (c);\n        f1 = (r)    *(cols+1) + (c);\n        f2 = (r)    *(cols+1) + (c) + 1;\n        facets.push([f0, f1, f2]);\n      }\n    }\n  }\n  // 0.781346917786, -0.003739250431392, 1.614568446468,\n  // data.waves = height(0.7813,-.0037); //0.42078\n  return {\n    waves:waves,\n    vertices:vertices,\n    facets:facets,\n    surface_derivatives:surface_derivatives\n  };\n};"